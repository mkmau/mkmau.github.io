---
layout: essay
type: essay
image: images/micromouse.jpg
title: Assignment 3 Reflection
# All dates must be YYYY-MM-DD format!
date: 2022-03-31
labels:
  - essay
---
<img class="ui medium floated rounded image" src="../images/micromouse.jpg" width="200">

Briefly describe your system (e.g. A store selling Pokemon game cards)
I decided to do an e-commerce store that sold CD’s from various decades (the 70’s, 80’s, 90’s, and 2000’s, with four CD’s from each decade).
Any notable shortcomings, bugs, problems, or additional features not implemented?
I really wanted to have a review page since that’s a huge part of e-commerce, connecting people from all over the world that couldn’t connect otherwise. I think another issue I had was that I didn’t have much customization for the user. I wanted to have last login information and have an autofill function for user information that could remember user’s information and input it for them. Similar to a shopping cart I thought an added feature of seeing their last purchase and having some kind of related items tab would have made my simple store a lot closer to an e-commerce store. I think one issue I had was with the CSS on my page. I think there were some background image issues as well as spacing issues on my checkout page. I think of the code I had, most of it worked well. I don’t remember many functionality problems but that was because my page was quite simple. 
Describe what you are most proud of about your system:
I think I’m most proud of it actually working. I know it’s small but for me, having a simple working e-commerce store seemed almost impossible considering how little I understood initially. It’s primitive but it works. But functionality wise I think the sidebar was a great touch. I had a lot of help from friends that recommended sites and functionality that would make a sidebar look more appealing, such as the slide fade in when it’s activated and deactivated. But overall by far I’m just proud that it worked and that I can always refer back to it and say: “I did that and I know how to do it again.”
Describe what you are least happy with your system:
I would have liked to add more functionality into my site. As it stands now it’s just so simple. Granted it took days to make it work but still, I would have liked to have been able to add more functions, such as the review feature and more personalization like I mentioned before. Simple is ok, but my system just has such little functionality in my opinion. I’m still proud of it but it would have been nice if I could have added more to it. That’s not to say I knew how to do it. My plan was to do something similar to the login page, having a file that is able to have additional information written into, then read back to the client and display that information. I had a very rough, basic idea of how to implement it but ultimately decided against trying to implement in favor of a more down to earth system that I was sure would work. 
How was developing this assignment different than assignment #2?
Because this was the culmination of our previous assignments, I was trying to add features that would make the site pop and make the UI attractive. Assignment 1 and 2 were both mainly focused on functionality over design so I tried to add in better CSS (which when I finished and was looking at it wasn’t as impressive as I thought it would be). Development wise I also wanted to make the process much more streamlined. Again, focusing on the experience of using the site so that there aren’t any awkward redirects like there were in my assignment 2
When you ran into a problem, what did you do to address it?
I tried to code in chunks which had previously been good for developing the page. So, when I did run into issues it was pretty easy to fix since the new code I added was clearly the issue. But, when I would run into an issue that I couldn’t easily figure out, or if I had coded or edited too much, I would try to look at previous versions of my code and figure out where I went wrong. It was a bit painstaking but having chunks of new code made it easier to go line by line and check to make sure I had done everything correctly such as defining variables and calling correct files etc. If there was something that wasn’t a mistake that could easily be fixed I would run to google and see if I was adding something in wrong or if my syntax was off. I also had a ton of help from my friends who are computer science majors, and spent a lot of time on video calls bugging them for help. Thankfully they were good at explaining what the issue was so that I could then replicate their help if another issue came up. 
Describe what worked well in doing this assignment?
I think having a clear path of what I wanted to do and logistically how I was going to do it was helpful. That really helped me to stay organized and on topic, and tackle certain milestones that helped me with staying motivated and clear headed so that I could code accurately. That minimized mistakes and when mistakes did arise, made them easier to remedy. 
Describe what did not work well in doing this assignment?
Coding is a language that I’m clearly not fluent in. It felt like being in Japanese class again where I know what I want to say in English but the code just won’t come out on the screen. But that’s the process of learning anything: being bad at it. I really would’ve liked to just instantly know how to code, but if that were the case then it wouldn’t have made sense to take ITM 352. Sure, I probably struggled more than everyone else in the class but I knew going in that might be the case and I’m glad that I eventually finished it (later than everyone else of course). Having to struggle and claw to make something successful, having to learn from my mistakes and dust myself off when I would mess up, break my code, cause something to go wrong on the server side or ruin my client html page was honestly terrible, but also made the final “you did it” so worth it. I think what went wrong for me was my approach to the class. I hate being bad at things and I was especially bad at coding. I wish I had done the work earlier so that maybe my struggle might not have been so bad. Theodore Roosevelt said: “If you could kick the person in the pants responsible for most of your trouble, you wouldn't sit for a month,” and I completely agree. My approach of basically giving up when things were too difficult has never worked for me, so I have no idea why I was doing it for ITM. Facing the issue head on, be it a bug in my code or my approach to the class as a whole helped me to finish the course much quicker than when I was avoiding the issue. 
What did you learn from doing this assignment?
I always knew coding was difficult; I think it’s about as difficult as I expected it to be. I know I still have a lot to learn since an e-commerce store can’t just be built off for loops and if statements (I’m sure it could be and they are utilized but I need MUCH more skills before I can approach a full on store which I hopefully won’t have to do). But on the technical side I learned of course the basics of coding. On the personal side I learned to suck it up and be an adult about things when they get difficult. 
If you could go back in time and do things differently, what would you change?
I would change my approach to the class and assignments. If I had approached them as a learning experience rather than an insurmountable challenge, I think I might have still needed extra time to complete the course, but my time wouldn’t have been as stressful or difficult as I made it for myself. Don’t get me wrong, this class is difficult even if you’re a genius (I had heard from people prior that this class was one of the hardest you could take). But if I changed my mindset I would've been much better off. 
Estimate the % of time you spent (a) thinking about how to do something, (b) writing code (but do not include testing, (c) testing and debugging
I spent probably 40% of the time thinking about things, both before I started coding and while I was coding trying to problem solve and figure out what I was going to do
Writing the code took a lot less time because I spent so much time brainstorming. I’d say maybe 20%, which could’ve been a lot more without prior code to look at, both my own, and with the help of people I knew to both guide me and donate their code (which I of course referenced). 
Testing and debugging didn’t take as long as I thought it would. I think it took about 40% since I would stop intermittently and check to make sure everything was working then would have to go back and fix anything that had been broken. 
